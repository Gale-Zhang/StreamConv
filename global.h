typedef enum
 {
   SUCCESS = 0,                /**< No error */
   ARGUMENT_ERROR = -1,        /**< One or more arguments are incorrect */
   LENGTH_ERROR = -2,          /**< Length of data buffer is incorrect */
   SIZE_MISMATCH = -3,         /**< Size of matrices is not compatible with the operation. */
   NANINF = -4,                /**< Not-a-number (NaN) or infinity is generated */
   SINGULAR = -5,              /**< Generated by matrix inversion if the input matrix is singular and cannot be inverted. */
   TEST_FAILURE = -6           /**< Test Failed  */
 } status;

 typedef enum
 {
	 CONVOLVE = 0x00,
	 RELU = 0x10,
	 SIGMOID = 0x11,
	 TANH = 0x12,
	 MAX_POOL = 0x20,
	 AVE_POOL = 0x21,
	 FULLY_CONNECT = 0x30,
	 SOFT_MAX = 0x40
 } operation;

#include <ap_axi_sdata.h>
typedef ap_axiu<8,2,5,6> uint8_channel;
typedef ap_axiu<8,2,5,6> int8_channel;

typedef signed char int8_t;
typedef unsigned char uint8_t;
typedef signed short int16_t;
typedef unsigned short uint16_t;
typedef signed int int32_t;
typedef unsigned int uint32_t;

typedef int8_t q7_t;
typedef int16_t q15_t;
typedef int32_t q31_t;


#define pos(x) (x < 0 ? (x + 36) : x)
#define length(array) sizeof(array) / sizeof(array[0])

#define NN_ROUND(out_shift) ( 0x1 << (out_shift - 1) )

#define SSAT(a, b) ({ __typeof__ (a) _a = (a); \
                        __typeof__ (b) _b = (b); \
                        _b = 1 << (_b - 1); \
                        _a = _a < (_b - 1) ? _a : (_b - 1); \
                        _a > (-_b) ? _a : (-_b); })

#define USAT(a, b) ({ __typeof__ (a) _a = (a); \
                        __typeof__ (b) _b = (b); \
                        _b = 1 << (_b - 1); \
                        _a = _a < (_b - 1) ? _a : (_b - 1); \
                        _a > 0 ? _a : 0; })
